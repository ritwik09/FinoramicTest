#include<bits/stdc++.h>
using namespace std;

struct node
{
	int data;
	struct node* left;
	struct node* right; 
};
 
void printPath(struct node* node,int path[],int len,int sum);
void print(int arr[],int len,int sum);


void printPaths(struct node* node,int sum)
{
	int path[10000];
	printPath(node,path,0,sum);
}

void printPath(struct node* node,int path[],int len,int sum)
{
	if(node==NULL)
	{
		return;
	}
	
	path[len]=node->data;
	len++;
	
	if(node->left==NULL && node->right==NULL)
	{
		print(path,len,sum);
	}
	
	else
	{
		printPath(node->left,path,len,sum);
		printPath(node->right,path,len,sum);
	}
}


void print(int arr[],int len,int sum)
{
	int i,x=0;
	for(i=0;i<len;i++)
	{
		x+=arr[i];
	}
	
	if(x==sum)
	{
		cout<<"Path:- ";
		for(i=0;i<len;i++)
		{
			cout<<arr[i]<<" ";
			
		}
		
		cout<<endl;
	}
	
	
}

struct node* new_node(int data)
{
	struct node* node=(struct node*) malloc (sizeof(struct node));
	node->data=data;
	node->left=NULL;
	node->right=NULL;
	return(node);
}
int main()
{
	
	int sum;
	 //possible sum are 7 and 10
	 
	cout<<"Enter sum.....Possible values are 7 and 10"<<endl;
	cin>>sum;

	struct node* root=new_node(1);
	root->left=new_node(2);
	root->right=new_node(4);
	root->right->left=new_node(2);
	root->left->left=new_node(3);
	root->right->right=new_node(5);
	root->left->left->right=new_node(1);
		
	printPaths(root,sum);
	
	return 0;
}
